plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def appName = "FyMonay"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.fymoney"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.fymoney"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.debug
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        tasks["bundle${variant.name.capitalize()}"].doLast {
            def releaseBundle = file("${buildDir}/outputs/bundle/release/app-release.aab")
            def newBundleFileName = file("${buildDir}/outputs/bundle/release/${appName}_${variant.versionName}.aab")
            if (releaseBundle.exists()) {
                releaseBundle.renameTo(newBundleFileName)
                def green = "\u001B[32m"
                def underline = "\u001B[4m"
                def reset = "\u001B[0m"
                println("\n${green}✓✓✓ - AAB Bundle file${reset} created and renamed to ${underline}${appName}_${variant.versionName}.aab${reset}")
                println("${green}✓ Built ${underline}${newBundleFileName}${reset}\n")
            } else {
                println("AAB file not found!")
            }
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        variant.outputs.all { output ->
            output.outputFileName = "app-release.apk"
        }

        tasks["assemble${variant.name.capitalize()}"].doLast {
            def releaseApk = file("${buildDir}/outputs/apk/release/app-release.apk")
            def newApkFileName = file("${buildDir}/outputs/apk/release/${appName}_${variant.versionName}.apk")
            if (releaseApk.exists()) {
                releaseApk.renameTo(newApkFileName)
                def green = "\u001B[32m"
                def underline = "\u001B[4m"
                def reset = "\u001B[0m"
                println("\n${green}✓✓✓ - APK file file${reset} created and renamed to ${underline}${appName}_${variant.versionName}.apk${reset}")
                println("${green}✓ Built ${underline}${newApkFileName}${reset}\n")
            } else {
                println("APK file not found!")
            }
        }
    }
}

flutter {
    source = "../.."
}
